--- ffmpeg-4.4/libavformat/http.c	2021-04-08 17:28:40.000000000 -0400
+++ ffmpeg-4.4n/libavformat/http.c	2022-01-24 13:08:18.107704765 -0500
@@ -48,6 +48,7 @@
  * path names). */
 #define BUFFER_SIZE   (MAX_URL_SIZE + HTTP_HEADERS_SIZE)
 #define MAX_REDIRECTS 8
+#define MAX_CACHED_REDIRECTS 32
 #define HTTP_SINGLE   1
 #define HTTP_MUTLI    2
 #define MAX_EXPIRY    19
@@ -69,7 +70,9 @@
     uint64_t chunksize;
     int chunkend;
     uint64_t off, end_off, filesize;
+    char *uri;
     char *location;
+    int cache_redirect;
     HTTPAuthState auth_state;
     HTTPAuthState proxy_auth_state;
     char *http_proxy;
@@ -126,6 +129,9 @@
     int is_multi_client;
     HandshakeState handshake_step;
     int is_connected_server;
+    int64_t expires;
+    char *new_location;
+    AVDictionary *redirect_cache;
 } HTTPContext;
 
 #define OFFSET(x) offsetof(HTTPContext, x)
@@ -170,13 +176,14 @@
     { "listen", "listen on HTTP", OFFSET(listen), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 2, D | E },
     { "resource", "The resource requested by a client", OFFSET(resource), AV_OPT_TYPE_STRING, { .str = NULL }, 0, 0, E },
     { "reply_code", "The http status code to return to a client", OFFSET(reply_code), AV_OPT_TYPE_INT, { .i64 = 200}, INT_MIN, 599, E},
+    { "cache_redirect", "Save redirected URL for subsequent seek operations", OFFSET(cache_redirect), AV_OPT_TYPE_BOOL, { .i64 = FF_HTTP_CACHE_REDIRECT_DEFAULT }, 0, 1, D },
     { NULL }
 };
 
 static int http_connect(URLContext *h, const char *path, const char *local_path,
                         const char *hoststr, const char *auth,
-                        const char *proxyauth, int *new_location);
-static int http_read_header(URLContext *h, int *new_location);
+                        const char *proxyauth);
+static int http_read_header(URLContext *h);
 static int http_shutdown(URLContext *h, int flags);
 
 void ff_http_init_auth_state(URLContext *dest, const URLContext *src)
@@ -197,7 +204,7 @@
     char auth[1024], proxyauth[1024] = "";
     char path1[MAX_URL_SIZE], sanitized_path[MAX_URL_SIZE];
     char buf[1024], urlbuf[MAX_URL_SIZE];
-    int port, use_proxy, err, location_changed = 0;
+    int port, use_proxy, err;
     HTTPContext *s = h->priv_data;
 
     av_url_split(proto, sizeof(proto), auth, sizeof(auth),
@@ -257,12 +264,8 @@
             return err;
     }
 
-    err = http_connect(h, path, local_path, hoststr,
-                       auth, proxyauth, &location_changed);
-    if (err < 0)
-        return err;
-
-    return location_changed;
+    return http_connect(h, path, local_path, hoststr,
+                        auth, proxyauth);
 }
 
 static int http_should_reconnect(HTTPContext *s, int err)
@@ -298,31 +301,87 @@
     return av_match_list(http_code, s->reconnect_on_http_error, ',') > 0;
 }
 
+static char *redirect_cache_get(HTTPContext *s)
+{
+    AVDictionaryEntry *re;
+    int64_t expiry;
+    char *delim;
+
+    re = av_dict_get(s->redirect_cache, s->location, NULL, AV_DICT_MATCH_CASE);
+    if (!re) {
+        return NULL;
+    }
+
+    delim = strchr(re->value, ';');
+    if (!delim) {
+        return NULL;
+    }
+
+    expiry = strtoll(re->value, NULL, 10);
+    if (time(NULL) > expiry) {
+        return NULL;
+    }
+
+    return delim + 1;
+}
+
+static int redirect_cache_set(HTTPContext *s, const char *source, const char *dest, int64_t expiry)
+{
+    char *value;
+    int ret;
+
+    value = av_asprintf("%"PRIi64";%s", expiry, dest);
+    if (!value) {
+        return AVERROR(ENOMEM);
+    }
+
+    ret = av_dict_set(&s->redirect_cache, source, value, AV_DICT_MATCH_CASE | AV_DICT_DONT_STRDUP_VAL);
+    if (ret < 0) {
+        av_free(value);
+        return ret;
+    }
+
+    return 0;
+}
+
 /* return non zero if error */
 static int http_open_cnx(URLContext *h, AVDictionary **options)
 {
     HTTPAuthType cur_auth_type, cur_proxy_auth_type;
     HTTPContext *s = h->priv_data;
-    int location_changed, attempts = 0, redirects = 0;
+    int ret, attempts = 0, redirects = 0;
     int reconnect_delay = 0;
     uint64_t off;
+    char *cached;
 
 redo:
+
+    cached = redirect_cache_get(s);
+    if (cached) {
+        av_free(s->location);
+        s->location = av_strdup(cached);
+        if (!s->location) {
+            ret = AVERROR(ENOMEM);
+            goto fail;
+        }
+        goto redo;
+    }
+
     av_dict_copy(options, s->chained_options, 0);
 
     cur_auth_type       = s->auth_state.auth_type;
     cur_proxy_auth_type = s->auth_state.auth_type;
 
     off = s->off;
-    location_changed = http_open_cnx_internal(h, options);
-    if (location_changed < 0) {
-        if (!http_should_reconnect(s, location_changed) ||
+    ret = http_open_cnx_internal(h, options);
+    if (ret < 0) {
+        if (!http_should_reconnect(s, ret) ||
             reconnect_delay > s->reconnect_delay_max)
             goto fail;
 
         av_log(h, AV_LOG_WARNING, "Will reconnect at %"PRIu64" in %d second(s).\n", off, reconnect_delay);
-        location_changed = ff_network_sleep_interruptible(1000U * 1000 * reconnect_delay, &h->interrupt_callback);
-        if (location_changed != AVERROR(ETIMEDOUT))
+        ret = ff_network_sleep_interruptible(1000U * 1000 * reconnect_delay, &h->interrupt_callback);
+        if (ret != AVERROR(ETIMEDOUT))
             goto fail;
         reconnect_delay = 1 + 2 * reconnect_delay;
 
@@ -352,16 +411,28 @@
     }
     if ((s->http_code == 301 || s->http_code == 302 ||
          s->http_code == 303 || s->http_code == 307 || s->http_code == 308) &&
-        location_changed == 1) {
+        s->new_location) {
         /* url moved, get next */
         ffurl_closep(&s->hd);
         if (redirects++ >= MAX_REDIRECTS)
             return AVERROR(EIO);
+
+        if (!s->expires) {
+            s->expires = (s->http_code == 301 || s->http_code == 308) ? INT64_MAX : -1;
+        }
+
+        if (s->expires > time(NULL) && av_dict_count(s->redirect_cache) < MAX_CACHED_REDIRECTS) {
+            redirect_cache_set(s, s->location, s->new_location, s->expires);
+        }
+
+        av_free(s->location);
+        s->location = s->new_location;
+        s->new_location = NULL;
+
         /* Restart the authentication process with the new target, which
          * might use a different auth mechanism. */
         memset(&s->auth_state, 0, sizeof(s->auth_state));
         attempts         = 0;
-        location_changed = 0;
         goto redo;
     }
     return 0;
@@ -369,8 +440,8 @@
 fail:
     if (s->hd)
         ffurl_closep(&s->hd);
-    if (location_changed < 0)
-        return location_changed;
+    if (ret < 0)
+        return ret;
     return ff_http_averror(s->http_code, AVERROR(EIO));
 }
 int ff_http_get_shutdown_status(URLContext *h)
@@ -433,11 +504,17 @@
     s->chunkend      = 0;
     s->off           = 0;
     s->icy_data_read = 0;
+
     av_free(s->location);
     s->location = av_strdup(uri);
     if (!s->location)
         return AVERROR(ENOMEM);
 
+    av_free(s->uri);
+    s->uri = av_strdup(uri);
+    if (!s->uri)
+        return AVERROR(ENOMEM);
+
     if ((ret = av_opt_set_dict(s, opts)) < 0)
         return ret;
 
@@ -546,7 +623,7 @@
 
 static int http_handshake(URLContext *c)
 {
-    int ret, err, new_location;
+    int ret, err;
     HTTPContext *ch = c->priv_data;
     URLContext *cl = ch->hd;
     switch (ch->handshake_step) {
@@ -561,7 +638,7 @@
         return 2;
     case READ_HEADERS:
         av_log(c, AV_LOG_TRACE, "Read headers\n");
-        if ((err = http_read_header(c, &new_location)) < 0) {
+        if ((err = http_read_header(c)) < 0) {
             handle_http_errors(c, err);
             return err;
         }
@@ -623,9 +700,15 @@
         h->is_streamed = 1;
 
     s->filesize = UINT64_MAX;
+
     s->location = av_strdup(uri);
     if (!s->location)
         return AVERROR(ENOMEM);
+
+    s->uri = av_strdup(uri);
+    if (!s->uri)
+        return AVERROR(ENOMEM);
+
     if (options)
         av_dict_copy(&s->chained_options, *options, 0);
 
@@ -648,8 +731,12 @@
     }
     ret = http_open_cnx(h, options);
 bail_out:
-    if (ret < 0)
+    if (ret < 0) {
         av_dict_free(&s->chained_options);
+        av_dict_free(&s->redirect_cache);
+        av_freep(&s->new_location);
+        av_freep(&s->uri);
+    }
     return ret;
 }
 
@@ -735,14 +822,13 @@
 
 static int parse_location(HTTPContext *s, const char *p)
 {
-    char redirected_location[MAX_URL_SIZE], *new_loc;
+    char redirected_location[MAX_URL_SIZE];
     ff_make_absolute_url(redirected_location, sizeof(redirected_location),
                          s->location, p);
-    new_loc = av_strdup(redirected_location);
-    if (!new_loc)
+    av_freep(&s->new_location);
+    s->new_location = av_strdup(redirected_location);
+    if (!s->new_location)
         return AVERROR(ENOMEM);
-    av_free(s->location);
-    s->location = new_loc;
     return 0;
 }
 
@@ -965,8 +1051,43 @@
     return 0;
 }
 
-static int process_line(URLContext *h, char *line, int line_count,
-                        int *new_location)
+static void parse_expires(HTTPContext *s, const char *p)
+{
+    struct tm tm;
+
+    if (!parse_set_cookie_expiry_time(p, &tm)) {
+        s->expires = av_timegm(&tm);
+    }
+}
+
+static void parse_cache_control(HTTPContext *s, const char *p)
+{
+    char *age;
+    int offset;
+
+    /* give 'Expires' higher priority over 'Cache-Control' */
+    if (s->expires) {
+        return;
+    }
+
+    if (av_stristr(p, "no-cache") || av_stristr(p, "no-store")) {
+        s->expires = -1;
+        return;
+    }
+
+    age = av_stristr(p, "s-maxage=");
+    offset = 9;
+    if (!age) {
+        age = av_stristr(p, "max-age=");
+        offset = 8;
+    }
+
+    if (age) {
+        s->expires = time(NULL) + atoi(p + offset);
+    }
+}
+
+static int process_line(URLContext *h, char *line, int line_count)
 {
     HTTPContext *s = h->priv_data;
     const char *auto_method =  h->flags & AVIO_FLAG_READ ? "POST" : "GET";
@@ -1063,7 +1184,6 @@
         if (!av_strcasecmp(tag, "Location")) {
             if ((ret = parse_location(s, p)) < 0)
                 return ret;
-            *new_location = 1;
         } else if (!av_strcasecmp(tag, "Content-Length") &&
                    s->filesize == UINT64_MAX) {
             s->filesize = strtoull(p, NULL, 10);
@@ -1106,6 +1226,10 @@
         } else if (!av_strcasecmp(tag, "Content-Encoding")) {
             if ((ret = parse_content_encoding(h, p)) < 0)
                 return ret;
+        } else if (!av_strcasecmp(tag, "Expires")) {
+            parse_expires(s, p);
+        } else if (!av_strcasecmp(tag, "Cache-Control")) {
+            parse_cache_control(s, p);
         }
     }
     return 1;
@@ -1211,12 +1335,14 @@
     return av_stristart(str, header + 2, NULL) || av_stristr(str, header);
 }
 
-static int http_read_header(URLContext *h, int *new_location)
+static int http_read_header(URLContext *h)
 {
     HTTPContext *s = h->priv_data;
     char line[MAX_URL_SIZE];
     int err = 0;
 
+    av_freep(&s->new_location);
+    s->expires = 0;
     s->chunksize = UINT64_MAX;
 
     for (;;) {
@@ -1225,7 +1351,7 @@
 
         av_log(h, AV_LOG_TRACE, "header='%s'\n", line);
 
-        err = process_line(h, line, s->line_count, new_location);
+        err = process_line(h, line, s->line_count);
         if (err < 0)
             return err;
         if (err == 0)
@@ -1276,7 +1402,7 @@
 
 static int http_connect(URLContext *h, const char *path, const char *local_path,
                         const char *hoststr, const char *auth,
-                        const char *proxyauth, int *new_location)
+                        const char *proxyauth)
 {
     HTTPContext *s = h->priv_data;
     int post, err;
@@ -1420,11 +1546,11 @@
     }
 
     /* wait for header */
-    err = http_read_header(h, new_location);
+    err = http_read_header(h);
     if (err < 0)
         goto done;
 
-    if (*new_location)
+    if (s->new_location)
         s->off = off;
 
     err = (off == s->off) ? 0 : -1;
@@ -1546,7 +1672,7 @@
 static int http_read_stream(URLContext *h, uint8_t *buf, int size)
 {
     HTTPContext *s = h->priv_data;
-    int err, new_location, read_ret;
+    int err, read_ret;
     int64_t seek_ret;
     int reconnect_delay = 0;
 
@@ -1554,7 +1680,7 @@
         return AVERROR_EOF;
 
     if (s->end_chunked_post && !s->end_header) {
-        err = http_read_header(h, &new_location);
+        err = http_read_header(h);
         if (err < 0)
             return err;
     }
@@ -1766,6 +1892,9 @@
     if (s->hd)
         ffurl_closep(&s->hd);
     av_dict_free(&s->chained_options);
+    av_dict_free(&s->redirect_cache);
+    av_freep(&s->new_location);
+    av_freep(&s->uri);
     return ret;
 }
 
@@ -1807,6 +1936,16 @@
             return s->off;
     }
 
+    /* if redirect caching is disabled, revert to the original uri */
+    if (!s->cache_redirect && strcmp(s->uri, s->location)) {
+        char *new_uri;
+        new_uri = av_strdup(s->uri);
+        if (!new_uri)
+            return AVERROR(ENOMEM);
+        av_free(s->location);
+        s->location = new_uri;
+    }
+
     /* we save the old context in case the seek fails */
     old_buf_size = s->buf_end - s->buf_ptr;
     memcpy(old_buf, s->buf_ptr, old_buf_size);
@@ -1912,7 +2051,6 @@
     int port, ret = 0, attempts = 0;
     HTTPAuthType cur_auth_type;
     char *authstr;
-    int new_loc;
 
     if( s->seekable == 1 )
         h->is_streamed = 0;
@@ -1966,7 +2104,7 @@
      * since the client starts the conversation there, so there
      * is no extra data that we might buffer up here.
      */
-    ret = http_read_header(h, &new_loc);
+    ret = http_read_header(h);
     if (ret < 0)
         goto fail;
 
--- ffmpeg-4.4/libavformat/version.h	2021-04-08 17:28:40.000000000 -0400
+++ ffmpeg-4.4n/libavformat/version.h	2022-01-25 04:42:59.710670069 -0500
@@ -115,6 +115,7 @@
 #ifndef FF_API_LAVF_PRIV_OPT
 #define FF_API_LAVF_PRIV_OPT            (LIBAVFORMAT_VERSION_MAJOR < 60)
 #endif
+#define FF_HTTP_CACHE_REDIRECT_DEFAULT  (LIBAVFORMAT_VERSION_MAJOR < 60)
 
 
 #ifndef FF_API_R_FRAME_RATE
